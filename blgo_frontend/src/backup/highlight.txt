import React, { useContext } from "react";
import "../../statics/styles.css";
import { showPost } from "../../api/postApi";
import { ArticleContext } from "../../App";
import { useNavigate } from "react-router-dom";

function Highlight({ highlightPost }) {
  //const jsonData = [jsondata[5]];
  //  console.log("jsondata", jsonData);

  const { setArticleContent } = useContext(ArticleContext);
  const navigate = useNavigate();

  const convertToArr = (str) => {
    if (!str) return [];
    return str.split(",");
  };
  const formatDate = (dateString) => {
    if (!dateString) return "No date";

    const date = new Date(dateString);

    // Check if date is valid
    if (isNaN(date.getTime())) return "Invalid date";

    // Get day as number (1-31)
    const day = date.getDate();

    // Get month name in uppercase (JAN, FEB, etc.)
    const month = date
      .toLocaleString("en-US", { month: "short" })
      .toUpperCase();

    // Get full year (2024, 2025, etc.)
    const year = date.getFullYear();

    // Return formatted date string
    return `${day} ${month} ${year}`;
  };

  const removeHTMLTags = (htmlString) => {
    if (!htmlString) return "";

    // Remove opening and closing h1 tags
    let cleanString = htmlString
      .replace(/<h1[^>]*>/gi, "")
      .replace(/<\/h1>/gi, "");

    // Remove opening and closing p tags
    cleanString = cleanString.replace(/<p[^>]*>/gi, "").replace(/<\/p>/gi, "");

    let newString = trunkateData(cleanString);

    return newString;
  };

  const trunkateData = (sentence) => {
    const splitSentence = sentence.split(" ");
    return splitSentence.length > 10
      ? splitSentence.slice(0, 10).join("  ")
      : sentence;
  };

  const handleArticleClick = async (postId) => {
    try {
      const response = await showPost(postId);
      setArticleContent(response);
      navigate(`/api/article/${postId}`);
    } catch (error) {
      alert("Error in opening the article", error?.response?.message);
    }
  };
  return (
    <div>
      {highlightPost.map((post, index) => {
        //  console.log("map item TAGS", item.tags);
        return (
          <div
            className="flex w-full flex-[1] h-full bg-black rounded-[1.5rem] flex-col overflow-hidden md:flex-row md:h-[560px]"
            key={post.postId || index}
          >
            {/*Img*/}
            <div className="flex  flex-[1] w-full">
              <img
                className="object-cover w-full"
                src={
                  post.postCoverImg ||
                  "https://blog.tubikstudio.com/wp-content/uploads/2021/06/european-places-nature-illustration-8.jpg"
                }
                alt={removeHTMLTags(post.postTitle)}
              />
            </div>
            {/*content*/}
            <div className="flex flex-col flex-1 justify-evenly p-6 gap-6 text-white rounded-r-[1.5rem]">
              {/*Tags*/}
              <div className="flex gap-4 flex-wrap ">
                {convertToArr(post.postTags).map((tag, index) => {
                  return (
                    <span
                      key={index}
                      className=" flex text-white border-white w-fit text-xs border-[1px] px-3 py-[0.3rem] rounded-[20px]"
                    >
                      {tag}
                    </span>
                  );
                })}
              </div>

              <div className="flex flex-col gap-8">
                {/*Heading*/}
                <h2 className="font-[600] text-5xl leading-[55px]">
                  {removeHTMLTags(post.postTitle)}
                </h2>

                {/*Main Text*/}
                <span className="text-base items-center">
                  {" "}
                  {removeHTMLTags(post.postArticle)}
                  <span
                    className="font-bold text-lg shadow-xl shadow-white-500/50 px-2"
                    onClick={() => handleArticleClick(post.postId)}
                  >
                    Read More
                  </span>
                </span>
              </div>
              <div>
                <span className="text-sm font-[800] ">
                  {formatDate(post.postPublishDate)}
                </span>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
}

export default Highlight;
